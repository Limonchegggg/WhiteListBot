package bot.commands;


import java.util.List;

import com.google.common.collect.ImmutableMap;

import Database.DataBaseType;
import Database.mongoDB.MongoDbTables.Collection;
import Main.Main;
import bot.DiscordData;
import configs.Players;
import configs.PlayersGetter;
import net.dv8tion.jda.api.events.message.MessageReceivedEvent;
import net.dv8tion.jda.api.events.message.react.MessageReactionAddEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;

public class WhiteListJoin extends ListenerAdapter{
	private PlayersGetter pg = new PlayersGetter();
	private Main plugin = Main.getPlugin(Main.class);
	@Override
	public void onMessageReceived(MessageReceivedEvent e) {
		String[] message = e.getMessage().getContentRaw().split(" ");
		if(!e.getChannel().getId().equals(pg.getChanWhiteList())) {
			return;
		}
		String command = message[0].toLowerCase(); // –£–±–∏—Ä–∞–µ—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É
		if(!command.equals("gowl")) {
			return;
		}
		if(message.length <= 1) {
			e.getChannel().sendMessage("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ gowl <–ù–∏–∫>" + "\n–ü—Ä–∏–º–µ—Ä **gowl Shybka**").queue();
			return;
		}
		if(message.length > 2) {
			e.getChannel().sendMessage("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å!").queue();
			return;
		}
		//–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤
		if(message[1].length() < 4 || message[1].length() > 20) {
			e.getChannel().sendMessage("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–Ω–∞ –Ω–∏–∫–∞ 4, –∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è 20").queue();
			return;
		}
		//–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–µ–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
		String lowerInput = message[1].toLowerCase();
		if(!lowerInput.matches("[A-Za-z0-9_]+")) {
			e.getChannel().sendMessage("–ù–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –±—É–∫–≤ –∏/–∏–ª–∏ —Ü–∏—Ñ—Ä").queue();
			return;
		}
		String nick = message[1];
		String author = e.getAuthor().getName();
		String ID = e.getAuthor().getId();
		switch(DataBaseType.getByName(Players.get().getString("DatabaseType"))) {
		case All:
			if(plugin.mongoTables.containValue("NickName", nick, Collection.WhiteList) || plugin.mongoTables.containValue("Discord", author, Collection.WhiteList) || plugin.mongoTables.containValue("_id", ID, Collection.WhiteList)
					|| plugin.data.existsPlayer(nick) || plugin.data.existsDiscord(author) || plugin.data.existsDiscordId(ID)) {
				e.getChannel().sendMessage("**–¢–∞–∫–æ–π –Ω–∏–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!**").queue();
				return;
			}
			break;
		case MongoDB:
			if(plugin.mongoTables.containValue("NickName", nick, Collection.WhiteList) || plugin.mongoTables.containValue("Discord", author, Collection.WhiteList) || plugin.mongoTables.containValue("_id", ID, Collection.WhiteList)) {
				e.getChannel().sendMessage("**–¢–∞–∫–æ–π –Ω–∏–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!**").queue();
				return;
			}
			break;
		case MySQL:
			if(plugin.data.existsPlayer(nick) || plugin.data.existsDiscord(author) || plugin.data.existsDiscordId(ID)) {
				e.getChannel().sendMessage("**–¢–∞–∫–æ–π –Ω–∏–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!**").queue();
				return;
			}
			break;
		case None:
			e.getChannel().sendMessage("**–í–∞–π—Ç–ª–∏—Å—Ç –æ—Ç–∫–ª—é—á–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –¥—Ä—É–≥–æ–º—É!**").queue();
			return;
		default:
			break;
		
		}
		
		if(pg.isTicket()) {
			if(DiscordData.get().getStringList("Queue").contains(e.getAuthor().getId())) {
				e.getChannel().sendMessage("**–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –æ—á–µ—Ä–µ–¥–∏**").queue();
				return;		
			}
			e.getMessage().addReaction("üëç").queue();
			e.getMessage().addReaction("üëé").queue();
			List<String> queue = DiscordData.get().getStringList("Queue");
			queue.add(e.getAuthor().getId());
			DiscordData.get().set("Queue", queue);
			DiscordData.save();
			DiscordData.reload();
			e.getChannel().sendMessage("–î–æ—Ä–æ–≥–æ–π `" + message[1] + "`! –Ø –¥–æ–±–∞–≤–∏–ª —Ç–µ–±—è –≤ –æ—á–µ—Ä–µ–¥—å –∏ –Ω–∞–ø–∏—à—É –∫–æ–≥–¥–∞ —Ç–µ–±—è –ø—Ä–∏–º—É—Ç!").queue();
			return;
		}
		plugin.data.cratePlayer(message[1], e.getAuthor().getName(), e.getAuthor().getId());
		e.getChannel().sendMessage("–î–æ—Ä–æ–≥–æ–π `" + message[1] + "`! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∏–≥—Ä–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!").queue();
	}
	@Override
	public void onMessageReactionAdd(MessageReactionAddEvent e) {
		if(e.getUser().isBot()) return;
		if(!e.getChannel().getId().equals(pg.getChanWhiteList())) return;
		if(!pg.getAdminIdList().contains(e.getUser().getId())) return;
		try {
			e.retrieveMessage().queue(message -> {
				String[] msg = message.getContentRaw().split(" ");
				if(!DiscordData.get().getStringList("Queue").contains(message.getAuthor().getId())) return;
				String Nick = msg[1];
				String Discord = message.getAuthor().getName();
				String DiscordId = message.getAuthor().getId();
				switch(e.getReactionEmote().getName()) {
				//–ü–∞–ª–µ—Ü –≤–≤–µ—Ä—Ö
				case "üëç":
					switch(DataBaseType.getByName(Players.get().getString("DatabaseType"))) {
					case All:
						plugin.mongoTables.addDocument(plugin.mongoTables.CreateDocument(ImmutableMap.of("_id", DiscordId, "NickName", Nick, "Discord", Discord)), Collection.WhiteList);
						plugin.data.cratePlayer(Nick, Discord, DiscordId);
						plugin.sqld.CreatePlayer(Nick, Discord, DiscordId);
						break;
					case MongoDB:
						plugin.mongoTables.addDocument(plugin.mongoTables.CreateDocument(ImmutableMap.of("_id", DiscordId, "NickName", Nick, "Discord", Discord)), Collection.WhiteList);
						break;
					case MySQL:
						plugin.data.cratePlayer(Nick, Discord, DiscordId);
						plugin.sqld.CreatePlayer(Nick, Discord, DiscordId);
						break;
					default:
						break;
					
					}
					List<String> queue = DiscordData.get().getStringList("Queue");
					queue.remove(DiscordId);
					DiscordData.get().set("Queue", queue);
					DiscordData.save();
					DiscordData.reload();
					message.getAuthor().openPrivateChannel().queue((channel) -> {
						channel.sendMessage("–î–æ—Ä–æ–≥–æ–π `" + Nick + "`! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∏–≥—Ä–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ! üòé").queue();
					});
					return;
				//–ü–∞–ª–µ—Ü –≤–Ω–∏–∑
				case "üëé":
					List<String> queue1 = DiscordData.get().getStringList("Queue");
					queue1.remove(DiscordId);
					DiscordData.get().set("Queue", queue1);
					DiscordData.save();
					DiscordData.reload();
					message.getAuthor().openPrivateChannel().queue((channel) -> {
						channel.sendMessage("–î–æ—Ä–æ–≥–æ–π `" + Nick + "`! –ú–Ω–µ –∂–∞–ª—å, —Ç–µ–±–µ –æ—Ç–∫–∞–∑–∞–ª–∏, –Ω–æ –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! üòø").queue();
					});
					return;
				default:
					log("–ù–µ—Ç–æ—Ç —Å–º–∞–π–ª–∏–∫");
					return;
				}
			});
		}catch(Exception ee) {
			log("Fail");
		}
	}
	private void log(String text) {
		System.out.println(text);
	}
}